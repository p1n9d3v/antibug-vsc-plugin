<div id="english" class="section-content" style="display: none">
  <div class="container two-content">
    <div class="box callgraph-box">
      <div class="header-container">
        <h3 class="container-header">Contract Summary<br />(Call-Graph)</h3>
      </div>
      <div class="content-container">
        <div class="callgraph-container">
          <!-- <div class="callgraph"></div> -->
          <img src="call-graph.png" alt="call-graph" class="callgraph" />
        </div>
      </div>
    </div>
    <div class="box piechart-box">
      <div class="header-container">
        <h3 class="container-header">Security Summary</h3>
      </div>
      <div class="piechart-container">
        <div class="piechart2"></div>
      </div>
      <div class="content-container">
        <div>
          <div class="piechart-labels">
            <div class="piechart-label">
              <div class="label__color high"></div>
              <p>High</p>
              4
            </div>
            <div class="piechart-label">
              <div class="label__color medium"></div>
              <p>Medium</p>
              12
            </div>
            <div class="piechart-label">
              <div class="label__color low"></div>
              <p>Low</p>
              9
            </div>
            <div class="piechart-label">
              <div class="label__color info"></div>
              <p>Info</p>
              10
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="container one-content">
    <div class="box contract-box">
      <div class="header-container">
        <h3 class="container-header">Contract Analysis Result</h3>
      </div>
      <div class="content-container">
        <div class="item thead">
          <input type="checkbox" id="thead" />
          <label for="thead">
            <button class="view-button">+</button>
            <div class="contractName">Contract<br />Name</div>
            <div class="Inheritance">Inheritance</div>
            <div class="StateVariable">State<br />Variable</div>
            <div class="Functions">Function<br />Summaries</div>
            <div class="ExternalCalls">External<br />Calls</div>
          </label>
        </div>
        <div class="item">
          <input type="checkbox" id="tbody" />
          <label for="tbody">
            <button class="view-button">+</button>
            <div class="contractName">Bar</div>
            <div class="Inheritance">N/A</div>
            <div class="StateVariable">N/A</div>
            <div class="Functions">blockingFunction()</div>
            <div class="ExternalCalls">N/A</div>
          </label>
          <div class="hidden-content">
            <div class="function__info">
              <p class="main-text">
                <span class="subtitle">blockFunction()</span><br />
              </p>
              <table class="function__table">
                <thead>
                  <tr>
                    <th>Signature</th>
                    <th>Visibility</th>
                    <th>Modifiers</th>
                    <th>Internal Call</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <th>0x04d11bde</th>
                    <th>public</th>
                    <th>N/A</th>
                    <th>return(uint256, uint256)</th>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
        <div class="item">
          <input type="checkbox" id="tbody" />
          <label for="tbody">
            <button class="view-button">+</button>
            <div class="contractName">Foo</div>
            <div class="Inheritance">Bar</div>
            <div class="StateVariable">N/A</div>
            <div class="Functions">blockingFunction()<br />foo()</div>
            <div class="ExternalCalls">N/A</div>
          </label>
          <div class="hidden-content">
            <div class="function__info">
              <p class="main-text">
                <span class="subtitle">blockFunction()</span><br />
              </p>

              <table class="function__table">
                <thead>
                  <tr>
                    <th>Signature</th>
                    <th>Visibility</th>
                    <th>Modifiers</th>
                    <th>Internal Call</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <th>0x04d11bde</th>
                    <th>public</th>
                    <th>N/A</th>
                    <th>return(uint256, uint256)</th>
                  </tr>
                </tbody>
              </table>
            </div>
            <div class="function__info">
              <p class="main-text"><span class="subtitle">foo()</span><br /></p>

              <table class="function__table">
                <thead>
                  <tr>
                    <th>Signature</th>
                    <th>Visibility</th>
                    <th>Modifiers</th>
                    <th>Internal Call</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <th>0xc2985578</th>
                    <th>public</th>
                    <th>N/A</th>
                    <th>blockingFunction<br />require(bool, string)</th>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="container one-content">
    <div class="box contract-box">
      <div class="header-container">
        <h3 class="container-header">Security Analysis Result</h3>
      </div>
      <div class="content-container">
        <div class="item thead">
          <input type="checkbox" id="thead" />
          <label for="thead">
            <button class="view-button">+</button>
            <div class="detector">Detector</div>
            <div class="impact">Impact</div>
            <div class="confidence">Confidence</div>
            <div class="codeLine">Code Line</div>
          </label>
        </div>
        <div class="item">
          <input type="checkbox" id="tbody" />
          <label for="tbody">
            <button class="view-button">+</button>
            <div class="detector">Inccorect-Return</div>
            <div class="impact">
              <div class="label__color high"></div>
              High
            </div>
            <div class="confidence">
              <div class="label__color medium"></div>
              Medium
            </div>
            <div class="codeLine">Line 7</div>
          </label>
          <div class="hidden-content">
            <div class="description">
              <p class="main-text">
                <span class="subtitle">Info</span><br />
                Foo.foo()
                (Users/dlanara/Desktop/immm/ProtocolCamp/dev/SafeDevAnalyzer/test/detector/incorrect-return/blockingFunction.sol#14-18)
                calls Bar.blockingFunction()
                (Users/dlanara/Desktop/immm/ProtocolCamp/dev/SafeDevAnalyzer/test/detector/incorrect-return/blockingFunction.sol#5-9)
                which halt the execution return(uint256,uint256)(0,0x20)
                (Users/dlanara/Desktop/immm/ProtocolCamp/dev/SafeDevAnalyzer/test/detector/incorrect-return/blockingFunction.sol#7)
              </p>
              <p class="main-text">
                <span class="subtitle">Description</span><br />
                Detect if `return` in an assembly block halts unexpectedly the
                execution.
              </p>
              <p class="main-text">
                <span class="subtitle">Recommendation</span><br />
                Use the `leave` statement.
              </p>
            </div>
          </div>
        </div>
        <div class="item">
          <input type="checkbox" id="tbody" />
          <label for="tbody">
            <button class="view-button">+</button>
            <div class="detector">Weak-PRNG</div>
            <div class="impact">
              <div class="label__color high"></div>
              High
            </div>
            <div class="confidence">
              <div class="label__color medium"></div>
              Medium
            </div>
            <div class="codeLine">Line 11</div>
          </label>
          <div class="hidden-content">
            <div class="description">
              <p class="main-text">
                <span class="subtitle">Info</span><br />
                GuessTheRandomNumber.guess(uint256)
                (test/prng/roulette.sol#6-15) uses a weak PRNG: \"_guess ==
                answer (test/prng/roulette.sol#11)
              </p>
              <p class="main-text">
                <span class="subtitle">Description</span><br />
                In blockchain, it is not possible to generate true randomness.
                The absence of true randomness means that the results of random
                number generation can be predicted, allowing for manipulation.
                True randomness relies on unpredictable external factors such as
                atmospheric noise or user actions, but smart contracts do not
                have direct access to such factors, making it impossible to
                generate true randomness. This limitation is particularly
                important when smart contracts are used for security mechanisms
                like private key generation, as attackers could potentially
                predict the private keys and gain unauthorized access to
                accounts or funds.
              </p>
              <p class="main-text">
                <span class="subtitle">Background</span><br />
                Randomness in blockchain can be categorized into two types:
                pseudo-randomness and true randomness.<br />
                - Pseudo-randomness is generated by deterministic algorithms,
                and if you know the initial seed value, it can be predicted.
                <br />
                - True randomness relies on entropy sources and generates random
                values that are unpredictable.<br />- Nodes in a blockchain
                network can generate pseudo-randomness using various algorithms,
                and this randomness is used in scenarios such as selecting
                lottery winners, distributing rewards, determining the rarity of
                NFT token items in games, and distributing loot.<br />- However,
                blockchain ensures that all nodes in the network reach the same
                conclusion, so if the same input is provided, the output of a
                contract will always be the same.
              </p>
              <p class="main-text">
                <span class="subtitle">Recommendation</span><br />
                - It is advisable not to use `block.hash` and `block.timestamp`
                as sources for random number generation.<br />- Utilizing a
                `Commit-Reveal Scheme,` where participants commit values in
                advance and all commits are submitted before the actual values
                are revealed, is a good approach for generating randomness.<br />-
                Using decentralized solutions like `Chainlink VRF (Verifiable
                Random Function)` that leverage multiple inputs to generate
                random numbers is recommended.<br />- Employing hardware random
                number generators (RNG) to produce unpredictable, truly random
                values is a secure choice, making it difficult for attackers to
                predict the outcome.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
